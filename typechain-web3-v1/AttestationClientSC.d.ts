/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface AttestationClientSC extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): AttestationClientSC;
  clone(): AttestationClientSC;
  methods: {
    BALANCE_DECREASING_TRANSACTION(): NonPayableTransactionObject<string>;

    CONFIRMED_BLOCK_HEIGHT_EXISTS(): NonPayableTransactionObject<string>;

    PAYMENT(): NonPayableTransactionObject<string>;

    REFERENCED_PAYMENT_NONEXISTENCE(): NonPayableTransactionObject<string>;

    TRUSTLINE_ISSUANCE(): NonPayableTransactionObject<string>;

    merkleRootForRound(
      _stateConnectorRound: number | string | BN
    ): NonPayableTransactionObject<string>;

    stateConnector(): NonPayableTransactionObject<string>;

    verifyBalanceDecreasingTransaction(
      _chainId: number | string | BN,
      _data: [
        number | string | BN,
        (string | number[])[],
        number | string | BN,
        number | string | BN,
        string | number[],
        number | string | BN,
        string | number[],
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<boolean>;

    verifyConfirmedBlockHeightExists(
      _chainId: number | string | BN,
      _data: [
        number | string | BN,
        (string | number[])[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    verifyPayment(
      _chainId: number | string | BN,
      _data: [
        number | string | BN,
        (string | number[])[],
        number | string | BN,
        number | string | BN,
        string | number[],
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        number | string | BN,
        number | string | BN,
        string | number[],
        boolean,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    verifyReferencedPaymentNonexistence(
      _chainId: number | string | BN,
      _data: [
        number | string | BN,
        (string | number[])[],
        number | string | BN,
        number | string | BN,
        string | number[],
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<boolean>;

    verifyTrustlineIssuance(
      _chainId: number | string | BN,
      _data: [
        number | string | BN,
        (string | number[])[],
        string | number[],
        number | string | BN,
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
